# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined which songs are in the top 10 based on popularity.

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

#Then I looked up which artists have 3 or more songs in the top 50.

SELECT count(artist_name) as "Number of Songs", artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING "Number of Songs">=3;

#I also determined which songs were in a song key over 9.

SELECT artist_name, track_name, song_key
FROM BIT_DB.Spotifydata
WHERE song_key>=9
ORDER BY song_key desc;


#I looked up the average danceability for each artist.

SELECT
artist_name
,avg(danceability)
FROM BIT_DB.spotifydata
GROUP BY artist_name;

#And lastly, I determined which songs were the loudest.

SELECT track_name, loudness
FROM BIT_DB.spotifydata
ORDER BY loudness asc
LIMIT 10;
